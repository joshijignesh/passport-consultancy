{"version":3,"sources":["webpack:///./resources/js/containers/ApplyPassport/ApplyPassport.js","webpack:///./resources/js/components/UI/Input/Select.js","webpack:///./resources/js/components/UI/Input/Radio.js","webpack:///./resources/js/components/UI/Input/Switch.js","webpack:///./resources/js/components/UI/Input/CheckboxGroup.js","webpack:///./resources/js/components/UI/Input/Datepicker.js","webpack:///./resources/js/components/UI/Input/Textarea.js","webpack:///./resources/js/components/UI/Input/index.js","webpack:///./resources/js/shared/axios.js","webpack:///./resources/js/components/Service/Service.js","webpack:///./resources/js/components/ApplicantDetails/ApplicantDetails.js","webpack:///./resources/js/components/FamilyDetails/FamilyDetails.js","webpack:///./resources/js/components/PresentResi/PresentResi.js","webpack:///./resources/js/components/EmerContDetails/EmerContDetails.js","webpack:///./resources/js/components/PrevPassport/PrevPassport.js","webpack:///./resources/js/components/OtherDetails/OtherDetails.js","webpack:///./resources/js/components/DocumentDetails/DocumentDetails.js"],"names":["ApplyPassport","activeStep","steplabels","label","key","serviceForm","controls","formIsValid","applicantForm","familyForm","presentResiForm","emerContDetailsForm","prevPassportForm","otherDetailsForm","documentDetailsForm","value","updatedElementConfig","updateObject","options","updatedControl","elementConfig","updatedFormControls","updatedform","updatedFormElement","event","valid","checkValidity","touched","updatedForm","inputIdentifier","prevState","localStorage","window","data","state","step","formData","JSON","this","axios","res","prevProps","snapshot","isBirthOutOfIndia","displayValue","country","state_province_n","isPresentOutOfIndia","district_n","isPermanentSameAsPresent","isPoliticalAsylum","steps","orientation","error","onClick","style","padding","cursor","handleBack","handleNext","changed","inputChangedHandler","console","isReissue","container","justify","alignItems","spacing","item","sm","xs","handleReset","variant","color","handlePreview","Component","withRouter","useStyles","makeStyles","theme","margin","selectRoot","width","backgroundColor","selected","useOutlinedInputStyles","root","borderRadius","focused","notchedOutline","select","props","classes","outlinedInputClasses","inputLabelRef","React","labelWidth","setLabelWidth","validationError","required","minWidth","fullWidth","ref","input","name","id","onChange","inputProps","readOnly","readonly","option","PropTypes","elementType","shouldValidate","isRequired","radio","component","display","flexDirection","flexWrap","control","flexBasis","switchEle","checked","checkboxGroup","inputLabel","datepicker","utils","DateFnsUtils","format","inputVariant","disableFuture","disablePast","KeyboardButtonProps","validation","CssTextField","withStyles","borderColor","textarea","type","autoFocus","multiline","rows","inputElement","className","origin","instance","a","baseURL","isEditMode","md","align","gutterBottom","row","disabled"],"mappings":"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","file":"10.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router'\nimport axios from '../../shared/axios'; \nimport Typography from '@material-ui/core/Typography'; \nimport Button from '@material-ui/core/Button';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';  \nimport Service from '../../components/Service/Service'; \nimport Grid from '@material-ui/core/Grid';\nimport ApplicantDetails from '../../components/ApplicantDetails/ApplicantDetails';\nimport FamilyDetails from '../../components/FamilyDetails/FamilyDetails';\nimport PresentResi from '../../components/PresentResi/PresentResi';\nimport EmerContDetails from '../../components/EmerContDetails/EmerContDetails';\nimport PrevPassport from '../../components/PrevPassport/PrevPassport';\nimport OtherDetails from '../../components/OtherDetails/OtherDetails';\nimport DocmentDetails from '../../components/DocumentDetails/DocumentDetails';\nimport { serviceControls, applicantControls, familyControls, presentResiControls, emerContDetailsControls, prevPassportControls, otherDetailsControls, documentControls } from '../../controls';\nimport { updateObject, checkValidity } from '../../shared/utility'; \n\n\n\n \n \nclass ApplyPassport extends Component {\n     state = { \n        activeStep : 0,\n        steplabels: [\n            {label: 'Service Required', key: 'serviceForm'},\n            {label: 'Applicant Details', key: 'applicantForm'},\n            {label: 'Family Details(Father/Mother/Legal Guardian details; at least one is mandatory.)', key: 'familyForm'},\n            {label: 'Present Residential Address Details (where applicant presently resides)', key: 'presentResiForm'},\n            {label: 'Emergency Contact Details', key: 'emerContDetailsForm'},\n            {label: 'Previous Passport/ Application Details', key: 'prevPassportForm'},\n            {label: 'Other Details', key: 'otherDetailsForm'},\n            {label: 'Documents Submitted as Proof', key: 'documentDetailsForm'}, \n        ],\n        serviceForm: {\n            controls: {...serviceControls},\n            formIsValid: true\n        },\n        applicantForm: {\n            controls: {...applicantControls},\n            formIsValid: true\n        },\n        familyForm: {\n            controls: {...familyControls},\n            formIsValid: true\n        },\n        presentResiForm: {\n            controls: {...presentResiControls},\n            formIsValid: true\n        },\n        emerContDetailsForm: {\n            controls: {...emerContDetailsControls},\n            formIsValid: true\n        },\n        prevPassportForm: {\n            controls: {...prevPassportControls},\n            formIsValid: true\n        },\n        otherDetailsForm: {\n            controls: {...otherDetailsControls},\n            formIsValid: true\n        },\n        documentDetailsForm: {\n            controls: { ...documentControls },\n            formIsValid: true\n        }\n    }; \n\n    componentDidMount(){  \n        if(localStorage.getItem('formState')){\n            const formData= JSON.parse(localStorage.getItem('formState')); \n            this.setState({...formData});\n        }else{\n            axios.get('states/101')\n            .then(res => {\n                this.elementConfigHandler('applicantForm', 'state', res.data);\n            });\n\n            //If Present Address in India fetch All States\n            axios.get('states/101')\n            .then(res => {\n                this.elementConfigHandler('presentResiForm', 'state_province_n', res.data); \n            });\n        } \n    }\n    componentDidUpdate(prevProps, prevState, snapshot){ \n       /**Updating Applicant form location dependents-->**/\n       //If birth outside india then fetch Countries\n       if(\n           this.state.applicantForm.controls.isBirthOutOfIndia.value !== prevState.applicantForm.controls.isBirthOutOfIndia.value ){\n            if(this.state.applicantForm.controls.isBirthOutOfIndia.value === 'yes'){ \n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('applicantForm', 'country', res.data);\n                });\n            }else{\n                const options = [\n                    {\n                        value: '101', displayValue: 'India'\n                    }\n                ]\n                this.elementConfigHandler('applicantForm', 'country', options, '101');\n            }\n           \n       } \n\n       \n       //If Country is India Fetch States\n        if(\n            this.state.applicantForm.controls.country.value !== prevState.applicantForm.controls.country.value ){\n            if(this.state.applicantForm.controls.country.value === '101'){\n                if(!this.state.applicantForm.controls.state.value){\n                    axios.get('states/101')\n                    .then(res => { \n                        this.elementConfigHandler('applicantForm', 'state', res.data);\n                    });\n                }\n               \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('applicantForm', 'state', options);\n            }\n            \n        }\n\n        //On State Update fetch District\n        if(this.state.applicantForm.controls.state.value !==               prevState.applicantForm.controls.state.value ){\n \n\n            if(this.state.applicantForm.controls.country.value === '101'){ \n                axios.get('cities/'+this.state.applicantForm.controls.state.value)\n                .then(res => {  \n                    if(prevState.applicantForm.controls.state.value){\n                        this.elementConfigHandler('applicantForm', 'district', res.data);\n                    }else{\n                        this.elementConfigHandler('applicantForm', 'district', res.data,this.state.applicantForm.controls.district.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('applicantForm', 'district', options);\n            }\n            \n        }\n        /**<--Updating Applicant form location dependents**/\n\n        \n        /**Updating Preset Resi. form location dependents-->**/\n\n        //On State Update fetch District\n        if(this.state.presentResiForm.controls.state_province_n.value !==  prevState.presentResiForm.controls.state_province_n.value ){ \n            if(!this.state.presentResiForm.controls.isPresentOutOfIndia.value){ \n                axios.get('cities/'+this.state.presentResiForm.controls.state_province_n.value)\n                .then(res => {  \n                    if(prevState.presentResiForm.controls.state_province_n.value){\n                        this.elementConfigHandler('presentResiForm', 'district_n', res.data);\n                    }else{\n                        this.elementConfigHandler('presentResiForm', 'district_n', res.data,this.state.presentResiForm.controls.district_n.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('presentResiForm', 'district_n', options);\n            }\n            \n        }\n        \n        // On District update fetch Police stations\n        if(this.state.presentResiForm.controls.district_n.value !==  prevState.presentResiForm.controls.district_n.value ){ \n            if(!this.state.presentResiForm.controls.isPresentOutOfIndia.value){ \n                axios.get('stations/'+this.state.presentResiForm.controls.district_n.value)\n                .then(res => {  \n                    if(prevState.presentResiForm.controls.district_n.value){\n                        this.elementConfigHandler('presentResiForm', 'police_station_n', res.data);\n                    }else{\n                        this.elementConfigHandler('presentResiForm', 'police_station_n', res.data,this.state.presentResiForm.controls.police_station_n.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('presentResiForm', 'police_station_n', options);\n            }\n            \n        }\n\n        //Fetch Country on Switching isPresentOutOfIndia to true\n        if(this.state.presentResiForm.controls.isPresentOutOfIndia.value !==               prevState.presentResiForm.controls.isPresentOutOfIndia.value ){ \n            if(this.state.presentResiForm.controls.isPresentOutOfIndia.value){\n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('presentResiForm', 'country', res.data);\n                });\n            } \n        }\n\n        //Fetch Country on Switching isPermanentSameAsPresent to False\n        if(this.state.presentResiForm.controls.isPermanentSameAsPresent.value !==               prevState.presentResiForm.controls.isPermanentSameAsPresent.value ){ \n            if(!this.state.presentResiForm.controls.isPermanentSameAsPresent.value){\n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('presentResiForm', 'country_temp', res.data);\n                });\n            } \n        }\n\n\n        /**<--Updating Preset Resi. form location dependents**/\n\n        /**Updating otherDetailsForm. form location dependents-->**/\n        //Fetch Countries when isPoliticalAsylum switched to true\n            if(this.state.otherDetailsForm.controls.isPoliticalAsylum.value !==               prevState.otherDetailsForm.controls.isPoliticalAsylum.value ){ \n                if(this.state.otherDetailsForm.controls.isPoliticalAsylum.value){\n                    axios.get('countries')\n                    .then(res => { \n                        this.elementConfigHandler('otherDetailsForm', 'country', res.data);\n                    });\n                } \n            }\n        /**<--Updating otherDetailsForm. form location dependents**/\n        localStorage.setItem('formState', JSON.stringify(this.state));\n    }\n\n    elementConfigHandler = (formIdentifier, controlIdentifier, updatedOptions, value=\"\") => { \n        const updatedElementConfig = updateObject(this.state[formIdentifier].controls[controlIdentifier].elementConfig, {options:[...updatedOptions]});\n        const updatedControl = updateObject(this.state[formIdentifier].controls[controlIdentifier], {elementConfig: updatedElementConfig, value: value});\n        const updatedFormControls = updateObject(this.state[formIdentifier].controls,{[controlIdentifier]: updatedControl});\n        const updatedform = updateObject(this.state[formIdentifier], {controls: updatedFormControls}); \n        this.setState({[formIdentifier]: updatedform}); \n    }\n    inputChangedHandler = (event, inputIdentifier, sectionIdentifier) => { \n        let updatedFormElement = '';\n        if(\n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'select' || \n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'input' ||\n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'radio' || \n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'textarea'\n            ){\n            updatedFormElement = updateObject(this.state[sectionIdentifier].controls[inputIdentifier], {\n                value: event.target.value ? event.target.value : '',\n                valid: checkValidity(event.target.value ? event.target.value : (event.target.checked ? true: false), this.state[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n\n        if( \n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'checkboxGroup'  ||\n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'checkbox'  ||\n            this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'switch'\n            ){\n            updatedFormElement = updateObject(this.state[sectionIdentifier].controls[inputIdentifier], {\n                value: event.target.checked ? true : false,\n                valid: checkValidity(event.target.value ? event.target.value : (event.target.checked ? true: false), this.state[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n\n\n        if(this.state[sectionIdentifier].controls[inputIdentifier].elementType === 'date'){\n            updatedFormElement = updateObject(this.state[sectionIdentifier].controls[inputIdentifier], {\n                value: event,\n                valid: checkValidity(event, this.state[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n        \n        const updatedForm  = updateObject(this.state[sectionIdentifier].controls, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        // let formIsValid = true;\n        // for(let inputIdentifier in updatedForm){ \n        //         formIsValid = updatedForm[inputIdentifier].valid && formIsValid; \n        // } \n\n        let steplabels = [...this.state.steplabels];\n        if(inputIdentifier=== 'applyFor'){\n            if(event.target.value === 'reissue'){\n                steplabels[5].label = 'Enter details of latest held/existing/lost/damaged Ordinary Passport';\n            }else{\n                steplabels[5].label = 'Previous Passport/ Application Details';\n            }\n          \n        }\n         this.setState({\n              [sectionIdentifier]:{controls: updatedForm, formIsValid: true},\n              steplabels: [...steplabels]\n            }); \n    }\n\n    \n\n    handleNext = () => {\n        \n        this.setState(prevState => (\n            { \n                activeStep: prevState.activeStep + 1\n            }\n        )) ;\n    };\n\n    handleBack = () => {\n        this.setState(prevState => (\n            { \n                activeStep: prevState.activeStep - 1\n            }\n        )) ;\n    };\n\n    handleReset = () => {\n        \n       localStorage.removeItem('formState');\n       window.location.reload();\n    };\n\n    handlePreview = () => {\n        this.props.history.push('/preview',{data: this.state});\n    }\n    haldleLabelClick = (step) =>{\n        this.setState({\n            activeStep : step\n        });\n    }\n  \n    render() {\n        const steps = this.state.steplabels;  \n        return ( \n            <Fragment>   \n                <Stepper activeStep={this.state.activeStep} orientation=\"vertical\">\n                    {steps.map((step, index) => {\n\n                        return (\n                            <Step key={step.label}>\n                                <StepLabel error={!this.state[step.key].formIsValid} onClick={() => this.haldleLabelClick(index)} style={{ padding:'2px', cursor: 'pointer' }}>{step.label}</StepLabel>\n                                <StepContent>\n                                {(() => {\n                                    switch (index) {\n                                        case 0:\n                                            return (<Service \n                                                        controls={this.state.serviceForm.controls} \n                                                        formIsValid={this.state.serviceForm.formIsValid}  \n                                                        activeStep={this.state.activeStep}\n                                                        steps = {steps} \n                                                        handleBack={this.handleBack} \n                                                        handleNext={this.handleNext} \n                                                        changed={this.inputChangedHandler}/>\n                                                    );\n                                            break;\n                                        case 1:\n                                            return (<ApplicantDetails \n                                                        controls={this.state.applicantForm.controls} \n                                                        formIsValid={this.state.applicantForm.formIsValid}  \n                                                        activeStep={this.state.activeStep}\n                                                        steps={steps} \n                                                        handleBack={this.handleBack} \n                                                        handleNext={this.handleNext} \n                                                        changed={this.inputChangedHandler}/>\n                                            );\n                                            break;\n                                        case 2:\n                                            return (<FamilyDetails \n                                                controls={this.state.familyForm.controls} \n                                                formIsValid={this.state.familyForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler}/>\n                                            );\n                                            break;\n                                        case 3:\n                                            {console.log(this.state.presentResiForm.controls)}\n                                            return ( \n                                            <PresentResi \n                                                controls={this.state.presentResiForm.controls} \n                                                formIsValid={this.state.presentResiForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler}/>\n                                            );\n                                            break;\n                                        case 4: \n                                            return (<EmerContDetails \n                                                controls={this.state.emerContDetailsForm.controls} \n                                                formIsValid={this.state.emerContDetailsForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler}/>  \n                                            );\n                                            break;\n                                        case 5: \n                                            return (<PrevPassport \n                                                controls={this.state.prevPassportForm.controls} \n                                                formIsValid={this.state.prevPassportForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler} \n                                                isReissue= { this.state.serviceForm.controls.applyFor.value === 'reissue' }/>  \n                                            );\n                                            break; \n                                        case 6: \n                                            return (<OtherDetails \n                                                controls={this.state.otherDetailsForm.controls} \n                                                formIsValid={this.state.otherDetailsForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler} />  \n                                            );\n                                            break;  \n                                        case 7: \n                                            return (<DocmentDetails \n                                                controls={this.state.documentDetailsForm.controls} \n                                                formIsValid={this.state.documentDetailsForm.formIsValid}  \n                                                activeStep={this.state.activeStep}\n                                                steps={steps} \n                                                handleBack={this.handleBack} \n                                                handleNext={this.handleNext} \n                                                changed={this.inputChangedHandler} />  \n                                            );\n                                            break;\n                                            \n                                        default:\n                                        return 'Unknown step';\n                                    }\n                                })()} \n                            \n                                </StepContent>\n                            </Step>\n                        );\n                    } )}\n                </Stepper>\n                \n                <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n                    <Grid item sm={6} xs={12}> \n                        <Button onClick={this.handleReset}>\n                            Reset\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handlePreview}>\n                            Preview and Pay\n                        </Button>\n                    </Grid> \n                </Grid>   \n            </Fragment> \n        );\n    }\n}\n\nexport default withRouter(ApplyPassport);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles, OutlinedInput } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    margin: {\n        margin: theme.spacing(1)\n    },\n    selectRoot: {\n        width: \"200px\",\n        \"&:focus\": {\n            backgroundColor: \"transparent\"\n        }\n    },\n    selected: {}\n}));\nconst useOutlinedInputStyles = makeStyles(theme => ({\n    root: {\n        \"& $notchedOutline\": {\n            borderRadius: 50\n        },\n        \"&: \": {\n            backgroundColor: \"rgba(52, 52, 52, 0.8)\"\n        }\n    },\n    focused: {},\n    notchedOutline: {}\n}));\n\nconst select = props => {\n    const classes = useStyles();\n\n    const outlinedInputClasses = useOutlinedInputStyles();\n    let validationError = null;\n\n    const inputLabelRef = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    React.useEffect(() => {\n        setLabelWidth(inputLabelRef.current.offsetWidth);\n    }, []);\n\n    if (!props.valid && props.shouldValidate && props.touched) {\n        validationError = <p>Please enter a valid {props.valueType}</p>;\n    }\n\n    return (\n        <FormControl\n            variant=\"outlined\"\n            error={!props.valid && props.touched}\n            required={props.validation.required}\n            style={{ minWidth: 250 }}\n            fullWidth\n            root\n        >\n            <InputLabel ref={inputLabelRef}>{props.inputLabel}</InputLabel>\n            <Select\n                classes={{ root: classes.selectRoot }}\n                input={\n                    <OutlinedInput\n                        labelWidth={labelWidth}\n                        name=\"age\"\n                        id=\"outlined-age-simple\"\n                        classes={outlinedInputClasses}\n                    />\n                }\n                value={props.value}\n                onChange={props.changed}\n                labelWidth={labelWidth}\n                inputProps={{\n                    readOnly: props.readonly\n                }}\n            >\n                {props.elementConfig.options.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\nexport default select;\n\nselect.propTypes = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FormControl from '@material-ui/core/FormControl';  \nimport FormLabel from '@material-ui/core/FormLabel'; \nimport FormControlLabel from '@material-ui/core/FormControlLabel';  \nimport RadioGroup from '@material-ui/core/RadioGroup'; \nimport Radio from '@material-ui/core/Radio';\n\nconst radio = (props) => {\n    let validationError = null;\n   \n    if(props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n        <FormControl component=\"fieldset\"  required={props.elementConfig.required} error={!props.valid && props.touched}>\n            <FormLabel  component=\"legend\">{props.inputLabel}</FormLabel>\n            <RadioGroup value={props.value} onChange={props.changed} style={{ display: 'flex', flexDirection: props.elementConfig.display === 'inline' ? 'row' : 'column', flexWrap: 'wrap' }}>\n                {\n                    props.elementConfig.options.map(option =>  \n                    <FormControlLabel key={ option.value } value={option.value} control={<Radio />} \n                    label={option.displayValue} style={{flexBasis: '48%', minWidth: '20rem'}}/>\n                    )\n                } \n            </RadioGroup>\n        </FormControl>\n    );\n}\nexport default radio;\n\nradio.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst switchEle = (props) => {\n    let validationError = null;\n   \n    if(props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n    <FormControl component=\"fieldset\" required={props.validation.required} error={ !props.valid && props.touched }>\n        <FormLabel component=\"legend\">{ props.inputLabel}</FormLabel>\n        <FormGroup> \n            <FormControlLabel\n            control={<Switch checked={props.value} onChange={props.changed} />}\n            label={props.elementConfig.label}\n            /> \n        </FormGroup> \n    </FormControl>\n    );\n}\nexport default switchEle;\n\n\nswitchEle.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired \n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst checkboxGroup = (props) => { \n    \n    return (\n        <FormControlLabel\n            control={<Checkbox checked={props.value} onChange={props.changed} value={props.value} />}\n            label={props.inputLabel}/>\n    );\n}\nexport default checkboxGroup;\n\ncheckboxGroup.propTypes  = {\n    value: PropTypes.bool.isRequired, \n    changed: PropTypes.func.isRequired, \n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport FormControl from '@material-ui/core/FormControl';\nimport { \n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst datepicker = (props) => {\n    let validationError = null;\n     \n    \n\n    if(!props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n        <FormControl component=\"fieldset\" required={props.isRequired} fullWidth>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}> \n                <KeyboardDatePicker  \n                    id=\"date-picker-dialog\"\n                    label={ props.inputLabel }\n                    format=\"dd/MM/yyyy\"\n                    value={props.value}\n                    onChange={props.changed}\n                    inputVariant=\"outlined\" \n                    disableFuture={props.elementConfig.disableFuture} \n                    disablePast={props.elementConfig.disablePast} \n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />  \n            </MuiPickersUtilsProvider>\n        </FormControl>\n    );\n}\nexport default datepicker;\n\ndatepicker.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    validation: PropTypes.any.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired, \n}","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst CssTextField = withStyles({\n    root: {\n        \"& .MuiOutlinedInput-root\": {\n            \"& fieldset\": {\n                borderColor: \"#FFF\",\n                borderRadius: 50\n            }\n        }\n    }\n})(TextField);\n\nconst textarea = props => {\n    let validationError = null;\n\n    if (!props.valid && props.shouldValidate && props.touched) {\n        validationError = <p>Please enter a valid {props.valueType}</p>;\n    }\n\n    return (\n        <CssTextField\n            label={props.inputLabel}\n            variant=\"outlined\"\n            error={!props.valid && props.touched}\n            required={props.validation.required}\n            style={{ minWidth: 250 }}\n            onChange={props.changed}\n            value={props.value}\n            type={props.elementConfig.type}\n            autoFocus={props.elementConfig.autofocus}\n            multiline\n            rows={4}\n            fullWidth\n        />\n    );\n};\nexport default textarea;\n\ntextarea.propTypes = {\n    value: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n};\n","import React from 'react'; \nimport { makeStyles } from '@material-ui/core/styles';\n\n\nimport SelectElement from './Select';\nimport RadioElement from './Radio';\nimport SwitchElement from './Switch';\nimport CheckboxGroup from './CheckboxGroup';\nimport Input from './Input';\nimport DatePickerElement from './Datepicker';\nimport TextareaEle from './Textarea';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n      }\n}));\n\nconst input = (props) => {\n    const classes = useStyles();\n    let inputElement = null;      \n\n\n    switch (props.elementType){\n        case('input'):\n            inputElement = <Input {...props} />;\n            break;\n        case('textarea'):\n            inputElement = <TextareaEle {...props}/>;\n            break;\n        case('select'):\n            inputElement = <SelectElement {...props}/>;\n            break;\n        case('radio'): \n            inputElement = <RadioElement {...props}/>;\n            break;\n        case('switch'): \n            inputElement = <SwitchElement {...props}/>;\n            break;\n        case('checkboxGroup'): \n            inputElement = <CheckboxGroup {...props} />;\n            break;\n        case('date'): \n            inputElement = (\n                <DatePickerElement {...props}/>\n            );\n            break;\n        default:\n            inputElement = <input \n                        {...props.elementConfig} \n                        value={props.value} \n                        onChange={props.changed}/>;\n    }\n    return (\n        <div className={classes.root}> \n            { inputElement } \n        </div>\n    );\n}\n\nexport default input;","import axios from 'axios';\n\nconst origin = window.location.origin;\nconst instance = axios.create({\n    baseURL: origin+'/api/'\n});\n\nexport default instance;","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography' ; \nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport Input from '../UI/Input';\n\n\nconst service = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed, isEditMode = false }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.applyFor} \n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'applyFor', 'serviceForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.typeOfApplication}\n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'typeOfApplication', 'serviceForm')} \n                        />    \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.typeOfpassportBooklet}\n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'typeOfpassportBooklet', 'serviceForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        controls.typeOfApplication.value === 'tatkaal' ? \n                        (\n                            <Typography align=\"center\" color=\"error\" gutterBottom>Note : In case of TatKaal application, Additional fees of Rs.2000 will required to pay at Passport Office in Cash.</Typography>\n                        ) : ''\n                    }\n                </Grid>\n    {\n        controls.applyFor.value === 'reissue' ? \n        (\n            <Fragment>\n                <Grid item  xs={12}>\n                    <Input \n                        { ...controls.specifyReason_0 }   \n                        changed={(event) => changed(event, 'specifyReason_0', 'serviceForm')} \n                        shouldValidate={true} /> \n                </Grid>\n               \n                {\n                    (controls.specifyReason_0.value === 'due_to_expire' \n                    || controls.specifyReason_0.value === 'already_expired') ? (\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input    \n                                {...controls.dateOfExpiry}\n                                changed={(event) => changed(event, 'dateOfExpiry', 'serviceForm')}  \n                                shouldValidate={false} /> \n                        </Grid>\n                    ) : ''\n                }\n                {\n                    (controls.specifyReason_0.value === 'lost_passport' \n                    || controls.specifyReason_0.value === 'demaged_passport') ? (\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.hasPassportExpired}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'hasPassportExpired', 'serviceForm')} \n                                />  \n                        </Grid>\n                    ) : ''\n                }\n                 <Grid item xs={12}>\n                    <Input  {...controls.isChangeInExistingPassportParticulars} \n                        changed={(event) => changed(event, 'isChangeInExistingPassportParticulars', 'serviceForm')}  \n                        shouldValidate={false} /> \n                </Grid>\n                {\n                     controls.isChangeInExistingPassportParticulars.value ?\n                     (\n                        <Grid item xs={12}>\n                            <FormControl required component=\"fieldset\">\n                                <FormLabel component=\"legend\">Changes to make in Passport Particulars </FormLabel>\n                                    <FormGroup row>\n                                        <Input    \n                                            {...controls.cpp_appearance}\n                                            changed={(event) => changed(event, 'cpp_appearance', 'serviceForm')} /> \n                                        <Input    \n                                            {...controls.cpp_signature}\n                                            changed={(event) => changed(event, 'cpp_signature', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_givenName}\n                                            changed={(event) => changed(event, 'cpp_givenName', 'serviceForm')} /> \n                                         \n                                         <Input    \n                                            {...controls.cpp_surname}\n                                            changed={(event) => changed(event, 'cpp_surname', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_dateOfBirth}\n                                            changed={(event) => changed(event, 'cpp_dateOfBirth', 'serviceForm')} /> \n                                         <Input    \n                                            {...controls.cpp_spouseName}\n                                            changed={(event) => changed(event, 'cpp_spouseName', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_address}\n                                            changed={(event) => changed(event, 'cpp_address', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_deleteECR}\n                                            changed={(event) => changed(event, 'cpp_deleteECR', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_others}\n                                            changed={(event) => changed(event, 'cpp_others', 'serviceForm')} />  \n                                    </FormGroup> \n                            </FormControl> \n                        </Grid>\n                     ) :\n                     ''\n                } \n            </Fragment>\n        ): ''\n    }\n               \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default service;\n","import React, {Fragment, useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst applicantDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n   \n    \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.first_name} \n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'first_name', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.middle_name} \n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'middle_name', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.surname} \n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'surname', 'applicantForm')}/>  \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                <Input  \n                    {...controls.aadhaar_no} \n                    shouldValidate={true} \n                    changed={(event) => changed(event, 'aadhaar_no', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.gender}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'gender', 'applicantForm')} \n                        /> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.marital_status}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'marital_status', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}> \n                    <Input  \n                        {...controls.dateOfBirth}\n                        changed={(event) => changed(event, 'dateOfBirth', 'applicantForm')}  \n                        shouldValidate={false} /> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isBirthOutOfIndia}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isBirthOutOfIndia', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.name_VillageTownCity}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'name_VillageTownCity', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.country}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'country', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    \n                {controls.isBirthOutOfIndia.value === 'no' ? (\n                    <Input  \n                        {...controls.state}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'state', 'applicantForm')} \n                        /> \n                ) : ''}\n                     \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {controls.isBirthOutOfIndia.value === 'no' ? (\n                        <Input  \n                            {...controls.district}\n                            shouldValidate={true} \n                            changed={(event) => changed(event, 'district', 'applicantForm')} \n                        /> \n                    ) : ''} \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.citizenShipOfIndiaBy}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'citizenShipOfIndiaBy', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.pan}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'pan', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.voterId}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'voterId', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.eduQualification}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'eduQualification', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.employType}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'employType', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.employType.value === 'government' ? (\n                            <Input  \n                                {...controls.orgName}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'orgName', 'applicantForm')} \n                                /> \n                        ) : ''\n                    }\n                    \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isParentSpouseGovServent}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isParentSpouseGovServent', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isEligibleNonECR}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isEligibleNonECR', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.visibleDistiguishMark}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'visibleDistiguishMark', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isKnownByOtherName}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isKnownByOtherName', 'applicantForm')} \n                        />  \n                </Grid>\n                {\n                    controls.isKnownByOtherName.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_firstName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_firstName', 'applicantForm')} \n                                    />  \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_middleName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_middleName', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_surname}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_surname', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_firstName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_firstName', 'applicantForm')} \n                                    />  \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_middleName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_middleName', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_surname}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_surname', 'applicantForm')} \n                                    />\n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isNameChanged}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isNameChanged', 'applicantForm')} \n                        />  \n                </Grid>\n                { controls.isNameChanged.value ? (\n                    <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_firstName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_firstName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_middleName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_middleName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_surname}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_surname', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_firstName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_firstName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_middleName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_middleName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_surname}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_surname', 'applicantForm')} \n                                />\n                        </Grid>\n                    </Fragment>\n                ) : ''} \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default applicantDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography' ; \nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport Input from '../UI/Input';\n\n\nconst familyDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_first_name}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'father_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'father_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'father_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_first_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_first_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n            </Grid>   \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default familyDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst presentResi = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPresentOutOfIndia}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPresentOutOfIndia', 'presentResiForm')} \n                        />   \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.house_street}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'house_street', 'presentResiForm')} \n                        />   \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.village_town_city}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'village_town_city', 'presentResiForm')} \n                        />   \n                </Grid>     \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.country}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'country', 'presentResiForm')} \n                                />  \n                        ) : ''\n                    } \n                </Grid>  \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.state_province_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'state_province_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.state_province_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'state_province_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.district_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'district_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.district_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'district_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.zip_pin_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'zip_pin_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.zip_pin_n}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'zip_pin_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.police_station_y}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'police_station_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.police_station_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'police_station_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.mobile_no}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'mobile_no', 'presentResiForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.email_id}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'email_id', 'presentResiForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPermanentAddress}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPermanentAddress', 'presentResiForm')} \n                        />   \n                </Grid> \n                {\n                    controls.isPermanentAddress.value ? (\n                        <Fragment>\n                            <Grid item xs={12}>\n                                <Input  \n                                    {...controls.isPermanentSameAsPresent}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'isPermanentSameAsPresent', 'presentResiForm')} \n                                    />   \n                            </Grid> \n                            {\n                                !controls.isPermanentSameAsPresent.value ? (\n                                    <Fragment>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.house_street_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'house_street_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.village_town_city_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'village_town_city_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.country_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'country_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.zip_pin_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'zip_pin_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                    </Fragment> \n                                ) : ''\n                            }\n                        </Fragment>\n                    ) : ''\n                }\n                \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default presentResi;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst emerContDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.name_address}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'name_address', 'emerContDetailsForm')} \n                        />   \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mobile_no}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'mobile_no', 'emerContDetailsForm')} \n                        /> \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                        {...controls.email_id}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'email_id', 'emerContDetailsForm')} \n                        /> \n                </Grid>\n            </Grid>   \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default emerContDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \nimport Typography from '@material-ui/core/Typography';\nimport Input from '../UI/Input';\n\n\nconst prevPassport = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed, isReissue }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>  \n            {\n                !isReissue ? (\n                     <Fragment>\n                         <Grid item xs={12}>\n                                <Input  \n                                        {...controls.isHoldIdentityCert}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'isHoldIdentityCert', 'prevPassportForm')} \n                                        />    \n                                </Grid> \n                                <Grid item xs={12}>\n                                {\n                                        controls.isHoldIdentityCert.value  ? \n                                        (\n                                        <Typography align=\"left\" color=\"error\" gutterBottom>Note: If you already have a Passport,then please apply in Reissue Passport category; Do not apply in New Passport.</Typography>\n                                        ) : ''\n                                }\n                                </Grid>\n                     </Fragment>\n                ) : ''\n            }\n            {\n                    isReissue || controls.isHoldIdentityCert.value ? (\n                      <Fragment>\n                              <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.passport_no}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'passport_no', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.dateOfIssue}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'dateOfIssue', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.dateOfExpiry}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'dateOfExpiry', 'prevPassportForm')} \n                                        />  \n                                </Grid>   \n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.placeOfIssue}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'placeOfIssue', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.fileNumber}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'fileNumber', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                      </Fragment>      \n                    ) : ''\n            }\n                \n                <Grid item xs={12}>\n                        <Input  \n                        {...controls.details_prevCurOffPassport}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'details_prevCurOffPassport', 'prevPassportForm')} \n                        />  \n                </Grid>\n        {\n              controls.details_prevCurOffPassport.value === 'available' ? (\n                <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.passport_no_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'passport_no_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid> \n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.dateOfIssue_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'dateOfIssue_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>   \n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.dateOfExpiry_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'dateOfExpiry_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.placeOfIssue_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'placeOfIssue_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                </Fragment> \n              ) : ''  \n        } \n                <Grid item  xs={12}>\n                        <Input  \n                        {...controls.isAppliedNotIssued}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isAppliedNotIssued', 'prevPassportForm')} \n                        />  \n                </Grid>\n        {\n                controls.isAppliedNotIssued.value ? (\n                <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.fileNo_notIssued}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'fileNo_notIssued', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.monthYearApply}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'monthYearApply', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.namePassportOffice}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'namePassportOffice', 'prevPassportForm')} \n                                />  \n                        </Grid> \n                </Fragment>   \n                ) : ''\n        } \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default prevPassport;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \nimport Typography from '@material-ui/core/Typography';\n\nimport Input from '../UI/Input';\n\n\nconst otherDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isArrestWarran}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isArrestWarran', 'otherDetailsForm')} \n                        />   \n                </Grid> \n                {\n                    controls.isArrestWarran.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.nameCourtePlace}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'nameCourtePlace', 'otherDetailsForm')} \n                                    />   \n                            </Grid> \n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.caseFirWarrantNumber}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'caseFirWarrantNumber', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.lawSections}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'lawSections', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isCriminalOffence}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isCriminalOffence', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isCriminalOffence.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.nameCourtePlace_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'nameCourtePlace_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid> \n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.caseFirWarrantNumber_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'caseFirWarrantNumber_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.lawSections_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'lawSections_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isRefusedDenied}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isRefusedDenied', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isRefusedDenied.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.refusalReason}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'refusalReason', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isImpoundRevoked}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isImpoundRevoked', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isImpoundRevoked.value ? (\n                        <Fragment>\n                            <Grid item xs={12}>\n                                <Typography align=\"left\" variant=\"h6\" gutterBottom>Impounded/ Revoked Passport Details</Typography>\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.impoundRevokedPassportNo}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'impoundRevokedPassportNo', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.reasonImpoundRevocation}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'reasonImpoundRevocation', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPoliticalAsylum}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPoliticalAsylum', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isPoliticalAsylum.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.country}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'country', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isEmerCert}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isEmerCert', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isEmerCert.value ? (\n                        <Fragment>\n                             <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtNo}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtNo', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtDate}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtDate', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtCountry}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtCountry', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.issueAuthority}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'issueAuthority', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.reasonIssuing}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'reasonIssuing', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default otherDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';  \nimport Input from '../UI/Input';\n\n\nconst docmentDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>  \n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                    {...controls.proofOfBirth}\n                    shouldValidate={false} \n                    changed={(event) => changed(event, 'proofOfBirth', 'documentDetailsForm')} \n                    />  \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                    {...controls.proofOfPresentResi}\n                    shouldValidate={false} \n                    changed={(event) => changed(event, 'proofOfPresentResi', 'documentDetailsForm')} \n                    />  \n                </Grid>\n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default docmentDetails;\n"],"sourceRoot":""}