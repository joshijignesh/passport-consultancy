{"version":3,"sources":["webpack:///./resources/js/containers/EditPassportDetails/EditPassportDetails.js","webpack:///./resources/js/components/UI/Input/Select.js","webpack:///./resources/js/components/UI/Input/Radio.js","webpack:///./resources/js/components/UI/Input/Switch.js","webpack:///./resources/js/components/UI/Input/CheckboxGroup.js","webpack:///./resources/js/components/UI/Input/Datepicker.js","webpack:///./resources/js/components/UI/Input/Textarea.js","webpack:///./resources/js/components/UI/Input/index.js","webpack:///./resources/js/shared/utility.js","webpack:///./resources/js/shared/axios.js","webpack:///./resources/js/components/UI/Loading/Loading.js","webpack:///./resources/js/components/UI/Input/CustomInput.js","webpack:///./resources/js/components/UI/Input/Input.js","webpack:///./resources/js/components/Service/Service.js","webpack:///./resources/js/components/ApplicantDetails/ApplicantDetails.js","webpack:///./resources/js/components/FamilyDetails/FamilyDetails.js","webpack:///./resources/js/components/PresentResi/PresentResi.js","webpack:///./resources/js/components/EmerContDetails/EmerContDetails.js","webpack:///./resources/js/components/PrevPassport/PrevPassport.js","webpack:///./resources/js/components/OtherDetails/OtherDetails.js","webpack:///./resources/js/components/DocumentDetails/DocumentDetails.js","webpack:///./resources/js/components/UI/AlertModel/AlertModel.js","webpack:///./node_modules/@material-ui/icons/Info.js","webpack:///./node_modules/@material-ui/icons/CheckCircle.js","webpack:///./node_modules/@material-ui/icons/Sync.js"],"names":["EditPassportDetails","appData","order_ref","mobile","isSaving","isSavedSuccess","isSavedFail","value","updatedElementConfig","updateObject","options","updatedControl","elementConfig","updatedFormControls","updatedform","controls","updatedAppData","updatedFormElement","inputIdentifier","event","valid","checkValidity","touched","updatedForm","steplabels","formIsValid","prevState","activeStep","step","console","this","props","location","state","axios","params","editApp","res","statedata","JSON","prevProps","snapshot","applicantForm","isBirthOutOfIndia","displayValue","country","presentResiForm","state_province_n","isPresentOutOfIndia","district_n","isPermanentSameAsPresent","otherDetailsForm","isPoliticalAsylum","err","alertText","alertIdentifier","isLoading","isAlertModalOpen","color","align","orientation","map","key","label","error","onClick","style","padding","cursor","steps","handleBack","handleNext","changed","isEditMode","inputChangedHandler","isReissue","container","justify","alignItems","spacing","item","sm","xs","variant","handleSaveAppdata","isOpen","loadingText","alertTextMain","alertTextSecondary","handleClose","handleAlertModalClose","Component","withRouter","useStyles","makeStyles","theme","margin","selectRoot","width","backgroundColor","selected","useOutlinedInputStyles","root","borderRadius","focused","notchedOutline","select","classes","outlinedInputClasses","inputLabelRef","React","labelWidth","setLabelWidth","validationError","required","minWidth","fullWidth","ref","input","name","id","onChange","inputProps","readOnly","readonly","option","PropTypes","elementType","shouldValidate","isRequired","radio","component","display","flexDirection","flexWrap","control","flexBasis","switchEle","checked","checkboxGroup","inputLabel","datepicker","utils","DateFnsUtils","format","inputVariant","disableFuture","disablePast","KeyboardButtonProps","validation","CssTextField","withStyles","borderColor","textarea","type","autoFocus","multiline","rows","inputElement","className","oldObject","updatedProperties","rules","isValid","pattern","val","selectPreview","booleanPreview","multiCheckBoxList","filtredvalues","origin","window","instance","a","baseURL","open","justifyContent","height","size","marginTop","CustomTextField","CustomInput","md","gutterBottom","row","disabled","buttonText","alertIcon","fontSize","onClose","_interopRequireDefault","Object","defineProperty","exports","default","_react","_default","createElement","d"],"mappings":"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","file":"7.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router'\nimport axios from '../../shared/axios'; \nimport Typography from '@material-ui/core/Typography'; \nimport Button from '@material-ui/core/Button';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport StepContent from '@material-ui/core/StepContent';  \nimport Service from '../../components/Service/Service'; \nimport Grid from '@material-ui/core/Grid';\nimport ApplicantDetails from '../../components/ApplicantDetails/ApplicantDetails';\nimport FamilyDetails from '../../components/FamilyDetails/FamilyDetails';\nimport PresentResi from '../../components/PresentResi/PresentResi';\nimport EmerContDetails from '../../components/EmerContDetails/EmerContDetails';\nimport PrevPassport from '../../components/PrevPassport/PrevPassport';\nimport OtherDetails from '../../components/OtherDetails/OtherDetails';\nimport DocmentDetails from '../../components/DocumentDetails/DocumentDetails'; \nimport { updateObject, checkValidity } from '../../shared/utility'; \nimport Loading from '../../components/UI/Loading/Loading';\nimport AlertModel from '../../components/UI/AlertModel/AlertModel';\n\n\n\n \n \nclass EditPassportDetails extends Component {\n     state = {\n         appData: null,\n         order_ref: null,\n         mobile: null,\n         isSaving: null,\n         isSavedSuccess: null,\n         isSavedFail: null,\n     }; \n\n    componentDidMount(){   \n        console.log(this.props);\n        if(this.props.location.state && this.props.location.state.editApp){\n            axios.get('/order/edit',{\n                params:{\n                    order_ref: this.props.location.state.editApp.order_ref,\n                    mobile: this.props.location.state.editApp.mobile\n                }\n            })\n            .then(res => {\n                console.log(res);\n                if(res.data){\n                    const statedata = JSON.parse(res.data);\n                    this.setState({\n                        appData : statedata,\n                        order_ref: this.props.location.state.editApp.order_ref,\n                        mobile: this.props.location.state.editApp.mobile\n                    });\n                }\n            });\n        }\n        \n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot){  \n        if(!prevState.appData){\n            return;\n        }\n\n\n       /**Updating Applicant form location dependents-->**/\n       //If birth outside india then fetch Countries\n       if(\n           this.state.appData.applicantForm.controls.isBirthOutOfIndia.value !== prevState.appData.applicantForm.controls.isBirthOutOfIndia.value ){\n            if(this.state.appData.applicantForm.controls.isBirthOutOfIndia.value === 'yes'){ \n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('applicantForm', 'country', res.data);\n                });\n            }else{\n                const options = [\n                    {\n                        value: '101', displayValue: 'India'\n                    }\n                ]\n                this.elementConfigHandler('applicantForm', 'country', options, '101');\n            }\n           \n       } \n\n       \n       //If Country is India Fetch States\n        if(\n            this.state.appData.applicantForm.controls.country.value !== prevState.appData.applicantForm.controls.country.value ){\n            if(this.state.appData.applicantForm.controls.country.value === '101'){\n                if(!this.state.appData.applicantForm.controls.state.value){\n                    axios.get('states/101')\n                    .then(res => { \n                        this.elementConfigHandler('applicantForm', 'state', res.data);\n                    });\n                }\n               \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('applicantForm', 'state', options);\n            }\n            \n        }\n\n        //On State Update fetch District\n        if(this.state.appData.applicantForm.controls.state.value !==               prevState.appData.applicantForm.controls.state.value ){\n \n\n            if(this.state.appData.applicantForm.controls.country.value === '101'){ \n                axios.get('cities/'+this.state.appData.applicantForm.controls.state.value)\n                .then(res => {  \n                    if(prevState.appData.applicantForm.controls.state.value){\n                        this.elementConfigHandler('applicantForm', 'district', res.data);\n                    }else{\n                        this.elementConfigHandler('applicantForm', 'district', res.data,this.state.appData.applicantForm.controls.district.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('applicantForm', 'district', options);\n            }\n            \n        }\n        /**<--Updating Applicant form location dependents**/\n\n        \n        /**Updating Preset Resi. form location dependents-->**/\n\n        //On State Update fetch District\n        if(this.state.appData.presentResiForm.controls.state_province_n.value !==  prevState.appData.presentResiForm.controls.state_province_n.value ){ \n            if(!this.state.appData.presentResiForm.controls.isPresentOutOfIndia.value){ \n                axios.get('cities/'+this.state.appData.presentResiForm.controls.state_province_n.value)\n                .then(res => {  \n                    if(prevState.appData.presentResiForm.controls.state_province_n.value){\n                        this.elementConfigHandler('presentResiForm', 'district_n', res.data);\n                    }else{\n                        this.elementConfigHandler('presentResiForm', 'district_n', res.data,this.state.appData.presentResiForm.controls.district_n.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('presentResiForm', 'district_n', options);\n            }\n            \n        }\n        \n        // On District update fetch Police stations\n        if(this.state.appData.presentResiForm.controls.district_n.value !==  prevState.appData.presentResiForm.controls.district_n.value ){ \n            if(!this.state.appData.presentResiForm.controls.isPresentOutOfIndia.value){ \n                axios.get('stations/'+this.state.appData.presentResiForm.controls.district_n.value)\n                .then(res => {  \n                    if(prevState.appData.presentResiForm.controls.district_n.value){\n                        this.elementConfigHandler('presentResiForm', 'police_station_n', res.data);\n                    }else{\n                        this.elementConfigHandler('presentResiForm', 'police_station_n', res.data,this.state.appData.presentResiForm.controls.police_station_n.value);\n                    }\n                    \n                }); \n            }else{\n                const options = [ ];\n                this.elementConfigHandler('presentResiForm', 'police_station_n', options);\n            }\n            \n        }\n\n        //Fetch Country on Switching isPresentOutOfIndia to true\n        if(this.state.appData.presentResiForm.controls.isPresentOutOfIndia.value !==               prevState.appData.presentResiForm.controls.isPresentOutOfIndia.value ){ \n            if(this.state.appData.presentResiForm.controls.isPresentOutOfIndia.value){\n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('presentResiForm', 'country', res.data);\n                });\n            } \n        }\n\n        //Fetch Country on Switching isPermanentSameAsPresent to False\n        if(this.state.appData.presentResiForm.controls.isPermanentSameAsPresent.value !==               prevState.appData.presentResiForm.controls.isPermanentSameAsPresent.value ){ \n            if(!this.state.appData.presentResiForm.controls.isPermanentSameAsPresent.value){\n                axios.get('countries')\n                .then(res => { \n                     this.elementConfigHandler('presentResiForm', 'country_temp', res.data);\n                });\n            } \n        }\n\n\n        /**<--Updating Preset Resi. form location dependents**/\n\n        /**Updating otherDetailsForm. form location dependents-->**/\n        //Fetch Countries when isPoliticalAsylum switched to true\n            if(this.state.appData.otherDetailsForm.controls.isPoliticalAsylum.value !==               prevState.appData.otherDetailsForm.controls.isPoliticalAsylum.value ){ \n                if(this.state.appData.otherDetailsForm.controls.isPoliticalAsylum.value){\n                    axios.get('countries')\n                    .then(res => { \n                        this.elementConfigHandler('otherDetailsForm', 'country', res.data);\n                    });\n                } \n            }\n        /**<--Updating otherDetailsForm. form location dependents**/ \n\n        /*Saving Data */\n        if(this.state.isSaving !== prevState.isSaving && this.state.isSaving){\n            axios.post('order/updateappdata', {\n                appData: JSON.stringify(this.state.appData),\n                order_ref: this.state.order_ref,\n                mobile: this.state.mobile\n            })\n            .then(res => {\n                if(res.data.status){\n                    this.setState({isSaving: false, isSavedSuccess: true, isSavedFail: false});\n                }else{\n                    this.setState({isSaving: false, isSavedSuccess: false, isSavedFail: true});\n                }\n            })\n            .catch(err => {\n                 this.setState({isSaving: false, isSavedSuccess: false, isSavedFail: true});\n            });\n        }\n    }\n\n    elementConfigHandler = (formIdentifier, controlIdentifier, updatedOptions, value=\"\") => { \n        const updatedElementConfig = updateObject(this.state.appData[formIdentifier].controls[controlIdentifier].elementConfig, {options:[...updatedOptions]});\n        const updatedControl = updateObject(this.state.appData[formIdentifier].controls[controlIdentifier], {elementConfig: updatedElementConfig, value: value});\n        const updatedFormControls = updateObject(this.state.appData[formIdentifier].controls,{[controlIdentifier]: updatedControl});\n        const updatedform = updateObject(this.state.appData[formIdentifier], {controls: updatedFormControls}); \n        const updatedAppData = updateObject(this.state.appData, {[formIdentifier]: updatedform});\n        this.setState({appData: updatedAppData}); \n    }\n    inputChangedHandler = (event, inputIdentifier, sectionIdentifier) => { \n        let updatedFormElement = ''; \n        if(inputIdentifier === \"applyFor\" || inputIdentifier === \"typeOfApplication\" || inputIdentifier === \"typeOfpassportBooklet\"){\n            return;\n        }\n\n        if(\n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'select' || \n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'input' ||\n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'radio' || \n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'textarea'\n            ){\n            updatedFormElement = updateObject(this.state.appData[sectionIdentifier].controls[inputIdentifier], {\n                value: event.target.value ? event.target.value : '',\n                valid: checkValidity(event.target.value ? event.target.value : (event.target.checked ? true: false), this.state.appData[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n\n        if( \n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'checkboxGroup'  ||\n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'checkbox'  ||\n            this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'switch'\n            ){\n            updatedFormElement = updateObject(this.state.appData[sectionIdentifier].controls[inputIdentifier], {\n                value: event.target.checked ? true : false,\n                valid: checkValidity(event.target.value ? event.target.value : (event.target.checked ? true: false), this.state.appData[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n\n\n        if(this.state.appData[sectionIdentifier].controls[inputIdentifier].elementType === 'date'){\n            updatedFormElement = updateObject(this.state.appData[sectionIdentifier].controls[inputIdentifier], {\n                value: event,\n                valid: checkValidity(event, this.state.appData[sectionIdentifier].controls[inputIdentifier].validation ),\n                touched: true\n            });\n        } \n        \n        const updatedForm  = updateObject(this.state.appData[sectionIdentifier].controls, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        // let formIsValid = true;\n        // for(let inputIdentifier in updatedForm){ \n        //         formIsValid = updatedForm[inputIdentifier].valid && formIsValid; \n        // } \n\n        let steplabels = [...this.state.appData.steplabels];\n        if(inputIdentifier=== 'applyFor'){\n            if(event.target.value === 'reissue'){\n                steplabels[5].label = 'Enter details of latest held/existing/lost/damaged Ordinary Passport';\n            }else{\n                steplabels[5].label = 'Previous Passport/ Application Details';\n            }\n          \n        }\n\n        const updatedAppData = updateObject(this.state.appData,{\n            [sectionIdentifier]:{controls: updatedForm, formIsValid: true},\n            steplabels: [...steplabels]\n          } );\n\n         this.setState({appData: updatedAppData}); \n    }\n\n    \n\n    handleNext = () => {\n        this.setState(prevState => ({\n            appData: updateObject(this.state.appData, { activeStep: prevState.appData.activeStep + 1  })\n        })); \n    };\n\n    handleBack = () => {\n        this.setState(prevState => ({\n            appData: updateObject(this.state.appData, { activeStep: prevState.appData.activeStep - 1  })\n        })); \n    };\n\n  \n\n  \n    haldleLabelClick = (step) =>{\n        this.setState(prevState => ({\n            appData: updateObject(this.state.appData, { activeStep: step })\n        })); \n    }\n    \n    handleSaveAppdata = () => {\n        this.setState({isSaving: true});\n    }\n\n    handleAlertModalClose = () => {\n        this.setState({isSaving: false, isSavedFail: false, isSavedSuccess: false});\n    }\n    render() { \n        let alertText = null;\n        let alertIdentifier = null;\n        let isLoading = false;\n        let isAlertModalOpen = false;\n        if((!this.state.appData || this.state.isSaving)){\n            isLoading = true;\n        }\n        if(this.state.isSavedSuccess){\n            alertText = \"Successfully Saved\";\n            alertIdentifier = \"success\"\n        }\n\n        if(this.state.isSavedFail){\n            alertText = \"Saving Failed\";\n            alertIdentifier = \"failed\"\n        }\n\n        if(this.state.isSavedFail || this.state.isSavedSuccess){\n            isAlertModalOpen = true;\n        }\n        return ( \n            <Fragment>  \n                {this.state.appData ? (\n                    <Fragment>\n                        <Typography color=\"primary\" align=\"right\"><b>Order ID: </b>{ this.state.order_ref }</Typography>\n                        <Typography color=\"primary\" align=\"right\"><b>Mobile: </b>{ this.state.mobile }</Typography>\n                        <Stepper activeStep={this.state.appData.activeStep} orientation=\"vertical\">\n                        { this.state.appData.steplabels.map((step, index) => {\n\n                            return (\n                                <Step key={step.label}>\n                                    <StepLabel error={!this.state.appData[step.key].formIsValid} onClick={() => this.haldleLabelClick(index)} style={{ padding:'2px', cursor: 'pointer' }}>{step.label}</StepLabel>\n                                    <StepContent>\n                                    {(() => {\n                                        switch (index) {\n                                            case 0:\n                                                return (<Service \n                                                            controls={this.state.appData.serviceForm.controls} \n                                                            formIsValid={this.state.appData.serviceForm.formIsValid}  \n                                                            activeStep={this.state.appData.activeStep}\n                                                            steps = {this.state.appData.steplabels} \n                                                            handleBack={this.handleBack} \n                                                            handleNext={this.handleNext} \n                                                            changed={this.inputChangedHandler} \n                                                            isEditMode={true}/>\n                                                        );\n                                                break;\n                                            case 1:\n                                                return (<ApplicantDetails \n                                                            controls={this.state.appData.applicantForm.controls} \n                                                            formIsValid={this.state.appData.applicantForm.formIsValid}  \n                                                            activeStep={this.state.appData.activeStep}\n                                                            steps={this.state.appData.steplabels} \n                                                            handleBack={this.handleBack} \n                                                            handleNext={this.handleNext} \n                                                            changed={this.inputChangedHandler}/>\n                                                );\n                                                break;\n                                            case 2:\n                                                return (<FamilyDetails \n                                                    controls={this.state.appData.familyForm.controls} \n                                                    formIsValid={this.state.appData.familyForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler}/>\n                                                );\n                                                break;\n                                            case 3:\n                                                return (<PresentResi \n                                                    controls={this.state.appData.presentResiForm.controls} \n                                                    formIsValid={this.state.appData.presentResiForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler}/>\n                                                );\n                                                break;\n                                            case 4: \n                                                return (<EmerContDetails \n                                                    controls={this.state.appData.emerContDetailsForm.controls} \n                                                    formIsValid={this.state.appData.emerContDetailsForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler}/>  \n                                                );\n                                                break;\n                                            case 5: \n                                                return (<PrevPassport \n                                                    controls={this.state.appData.prevPassportForm.controls} \n                                                    formIsValid={this.state.appData.prevPassportForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler} \n                                                    isReissue= { this.state.appData.serviceForm.controls.applyFor.value === 'reissue' }/>  \n                                                );\n                                                break; \n                                            case 6: \n                                                return (<OtherDetails \n                                                    controls={this.state.appData.otherDetailsForm.controls} \n                                                    formIsValid={this.state.appData.otherDetailsForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler} />  \n                                                );\n                                                break;  \n                                            case 7: \n                                                return (<DocmentDetails \n                                                    controls={this.state.appData.documentDetailsForm.controls} \n                                                    formIsValid={this.state.appData.documentDetailsForm.formIsValid}  \n                                                    activeStep={this.state.appData.activeStep}\n                                                    steps={this.state.appData.steplabels} \n                                                    handleBack={this.handleBack} \n                                                    handleNext={this.handleNext} \n                                                    changed={this.inputChangedHandler} />  \n                                                );\n                                                break;\n                                                \n                                            default:\n                                            return 'Unknown step';\n                                        }\n                                    })()} \n                                \n                                    </StepContent>\n                                </Step>\n                            );\n                        } )}\n                    </Stepper>\n                    <Grid container justify=\"center\" alignItems=\"center\" spacing={2}>\n                        <Grid item sm={6} xs={12}> \n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleSaveAppdata}>Update</Button>\n                        </Grid> \n                    </Grid>\n                    <Loading isOpen={isLoading} loadingText='Saving Data...' />\n                    <AlertModel \n                        isOpen={isAlertModalOpen} \n                        alertTextMain={alertText} alertTextSecondary=\"\" alertIdentifier={alertIdentifier} handleClose={this.handleAlertModalClose}/>\n                </Fragment>\n                ): <Loading isOpen={isLoading} loadingText='Getting Order Data...'/>}   \n            </Fragment> \n        );\n    }\n}\n\nexport default withRouter(EditPassportDetails);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles, OutlinedInput } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n    margin: {\n        margin: theme.spacing(1)\n    },\n    selectRoot: {\n        width: \"200px\",\n        \"&:focus\": {\n            backgroundColor: \"transparent\"\n        }\n    },\n    selected: {}\n}));\nconst useOutlinedInputStyles = makeStyles(theme => ({\n    root: {\n        \"& $notchedOutline\": {\n            borderRadius: 50\n        },\n        \"&: \": {\n            backgroundColor: \"rgba(52, 52, 52, 0.8)\"\n        }\n    },\n    focused: {},\n    notchedOutline: {}\n}));\n\nconst select = props => {\n    const classes = useStyles();\n\n    const outlinedInputClasses = useOutlinedInputStyles();\n    let validationError = null;\n\n    const inputLabelRef = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    React.useEffect(() => {\n        setLabelWidth(inputLabelRef.current.offsetWidth);\n    }, []);\n\n    if (!props.valid && props.shouldValidate && props.touched) {\n        validationError = <p>Please enter a valid {props.valueType}</p>;\n    }\n\n    return (\n        <FormControl\n            variant=\"outlined\"\n            error={!props.valid && props.touched}\n            required={props.validation.required}\n            style={{ minWidth: 250 }}\n            fullWidth\n            root\n        >\n            <InputLabel ref={inputLabelRef}>{props.inputLabel}</InputLabel>\n            <Select\n                classes={{ root: classes.selectRoot }}\n                input={\n                    <OutlinedInput\n                        labelWidth={labelWidth}\n                        name=\"age\"\n                        id=\"outlined-age-simple\"\n                        classes={outlinedInputClasses}\n                    />\n                }\n                value={props.value}\n                onChange={props.changed}\n                labelWidth={labelWidth}\n                inputProps={{\n                    readOnly: props.readonly\n                }}\n            >\n                {props.elementConfig.options.map(option => (\n                    <MenuItem key={option.value} value={option.value}>\n                        {option.displayValue}\n                    </MenuItem>\n                ))}\n            </Select>\n        </FormControl>\n    );\n};\nexport default select;\n\nselect.propTypes = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport FormControl from '@material-ui/core/FormControl';  \nimport FormLabel from '@material-ui/core/FormLabel'; \nimport FormControlLabel from '@material-ui/core/FormControlLabel';  \nimport RadioGroup from '@material-ui/core/RadioGroup'; \nimport Radio from '@material-ui/core/Radio';\n\nconst radio = (props) => {\n    let validationError = null;\n   \n    if(props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n        <FormControl component=\"fieldset\"  required={props.elementConfig.required} error={!props.valid && props.touched}>\n            <FormLabel  component=\"legend\">{props.inputLabel}</FormLabel>\n            <RadioGroup value={props.value} onChange={props.changed} style={{ display: 'flex', flexDirection: props.elementConfig.display === 'inline' ? 'row' : 'column', flexWrap: 'wrap' }}>\n                {\n                    props.elementConfig.options.map(option =>  \n                    <FormControlLabel key={ option.value } value={option.value} control={<Radio />} \n                    label={option.displayValue} style={{flexBasis: '48%', minWidth: '20rem'}}/>\n                    )\n                } \n            </RadioGroup>\n        </FormControl>\n    );\n}\nexport default radio;\n\nradio.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst switchEle = (props) => {\n    let validationError = null;\n   \n    if(props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n    <FormControl component=\"fieldset\" required={props.validation.required} error={ !props.valid && props.touched }>\n        <FormLabel component=\"legend\">{ props.inputLabel}</FormLabel>\n        <FormGroup> \n            <FormControlLabel\n            control={<Switch checked={props.value} onChange={props.changed} />}\n            label={props.elementConfig.label}\n            /> \n        </FormGroup> \n    </FormControl>\n    );\n}\nexport default switchEle;\n\n\nswitchEle.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired \n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst checkboxGroup = (props) => { \n    \n    return (\n        <FormControlLabel\n            control={<Checkbox checked={props.value} onChange={props.changed} value={props.value} />}\n            label={props.inputLabel}/>\n    );\n}\nexport default checkboxGroup;\n\ncheckboxGroup.propTypes  = {\n    value: PropTypes.bool.isRequired, \n    changed: PropTypes.func.isRequired, \n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport FormControl from '@material-ui/core/FormControl';\nimport { \n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nconst datepicker = (props) => {\n    let validationError = null;\n     \n    \n\n    if(!props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return (\n        <FormControl component=\"fieldset\" required={props.isRequired} fullWidth>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}> \n                <KeyboardDatePicker  \n                    id=\"date-picker-dialog\"\n                    label={ props.inputLabel }\n                    format=\"dd/MM/yyyy\"\n                    value={props.value}\n                    onChange={props.changed}\n                    inputVariant=\"outlined\" \n                    disableFuture={props.elementConfig.disableFuture} \n                    disablePast={props.elementConfig.disablePast} \n                    KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                    }}\n                />  \n            </MuiPickersUtilsProvider>\n        </FormControl>\n    );\n}\nexport default datepicker;\n\ndatepicker.propTypes  = {\n    value: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    validation: PropTypes.any.isRequired,\n    elementType: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired, \n}","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\n\nconst CssTextField = withStyles({\n    root: {\n        \"& .MuiOutlinedInput-root\": {\n            \"& fieldset\": {\n                borderColor: \"#FFF\",\n                borderRadius: 50\n            }\n        }\n    }\n})(TextField);\n\nconst textarea = props => {\n    let validationError = null;\n\n    if (!props.valid && props.shouldValidate && props.touched) {\n        validationError = <p>Please enter a valid {props.valueType}</p>;\n    }\n\n    return (\n        <CssTextField\n            label={props.inputLabel}\n            variant=\"outlined\"\n            error={!props.valid && props.touched}\n            required={props.validation.required}\n            style={{ minWidth: 250 }}\n            onChange={props.changed}\n            value={props.value}\n            type={props.elementConfig.type}\n            autoFocus={props.elementConfig.autofocus}\n            multiline\n            rows={4}\n            fullWidth\n        />\n    );\n};\nexport default textarea;\n\ntextarea.propTypes = {\n    value: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired,\n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n};\n","import React from 'react'; \nimport { makeStyles } from '@material-ui/core/styles';\n\n\nimport SelectElement from './Select';\nimport RadioElement from './Radio';\nimport SwitchElement from './Switch';\nimport CheckboxGroup from './CheckboxGroup';\nimport Input from './Input';\nimport DatePickerElement from './Datepicker';\nimport TextareaEle from './Textarea';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n      }\n}));\n\nconst input = (props) => {\n    const classes = useStyles();\n    let inputElement = null;      \n\n\n    switch (props.elementType){\n        case('input'):\n            inputElement = <Input {...props} />;\n            break;\n        case('textarea'):\n            inputElement = <TextareaEle {...props}/>;\n            break;\n        case('select'):\n            inputElement = <SelectElement {...props}/>;\n            break;\n        case('radio'): \n            inputElement = <RadioElement {...props}/>;\n            break;\n        case('switch'): \n            inputElement = <SwitchElement {...props}/>;\n            break;\n        case('checkboxGroup'): \n            inputElement = <CheckboxGroup {...props} />;\n            break;\n        case('date'): \n            inputElement = (\n                <DatePickerElement {...props}/>\n            );\n            break;\n        default:\n            inputElement = <input \n                        {...props.elementConfig} \n                        value={props.value} \n                        onChange={props.changed}/>;\n    }\n    return (\n        <div className={classes.root}> \n            { inputElement } \n        </div>\n    );\n}\n\nexport default input;","export const updateObject = (oldObject, updatedProperties) => {\n\n    return {\n        ...oldObject,\n        ...updatedProperties\n    };\n}\n\nexport const checkValidity = (value, rules) => {\n    let isValid = true;\n\n    if (rules.required){\n        if(typeof(value) === 'string'){\n            isValid = value.trim() !== '' && isValid;\n        }else{\n            isValid = value && isValid;\n        }\n        \n    }\n\n    if(rules.minLength){\n        isValid = value.trim().length >= 6 && isValid;\n    }\n\n    if(rules.maxLength){\n        isValid = value.trim().length <= 10 && isValid;\n    }\n\n    if(rules.isEmail){\n        const pattern =  /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    if(rules.isMobile){\n        let val = null;\n        if(value){\n            val = value.trim();\n            val = val.length >= 10 && val.length<=13;\n        }\n        isValid =  val && isValid;\n    }\n    if(rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    if(rules.isAadhar){\n        isValid = value ? value.trim().length === 12 && isValid : isValid;\n    }\n\n    if(rules.isPAN){\n        const pattern = /^([a-zA-Z]){5}([0-9]){4}([a-zA-Z]){1}?$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    if(rules.isVoterID){\n        const pattern = /^([a-zA-Z]){3}([0-9]){7}?$/;\n        isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n}\n\nexport const selectPreview = (control) => { \n  const options = control.elementConfig.options.filter((item) => {\n                    return control.value == item.value;\n                })[0];  \n\n    return (options && options.value) ? options.displayValue : '';\n}\n\nexport const booleanPreview = (control) => {\n    return control.value ? 'Yes' : 'No';\n}\n\nexport const multiCheckBoxList = (controls)=> {\n\n    const filteredControls = controls.filter(control => {\n        return control.value;\n    })\n\n    const filtredvalues= filteredControls.map(item => item.inputLabel);\n\n    return filtredvalues.join(' ,');\n\n}","import axios from 'axios';\n\nconst origin = window.location.origin;\nconst instance = axios.create({\n    baseURL: origin+'/api/'\n});\n\nexport default instance;","import React from 'react';\nimport Dialog  from '@material-ui/core/Dialog'; \nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst loading = ({isOpen, loadingText}) => {\n\n    return (\n        <Dialog  open={isOpen}>\n            <Box style={{\n                    display:'flex', \n                    flexDirection: 'column',\n                    justifyContent:'center', \n                    alignItems:'center', \n                    width:'auto', \n                    height:'200px',\n                    padding: '50px'\n                    }}> \n                 <CircularProgress color=\"secondary\" size={60}/>\n                <Typography variant=\"h6\" align=\"center\" style={{ marginTop: '20px'}}>{loadingText}</Typography>\n            </Box> \n        </Dialog >\n    );\n}\n\nexport default loading;\n","import React from 'react';\r\nimport {  TextField, withStyles } from \"@material-ui/core\";\r\n\r\n\r\nconst CustomTextField = withStyles({\r\n    root: {\r\n        \"& input + fieldset\": {\r\n            borderRadius: 50,\r\n          }\r\n    }\r\n  })(TextField);\r\n\r\nexport default function CustomInput(props) {\r\n  \r\n    return (\r\n      <CustomTextField \r\n      {...props} />\r\n    );\r\n  }","import React from 'react';\nimport PropTypes from 'prop-types';   \nimport CustomInput from './CustomInput'\n\nconst input = (props) => {\n    let validationError = null;\n   \n    if(!props.valid && props.shouldValidate && props.touched){ \n        validationError = (<p>Please enter a valid {props.valueType}</p>);\n    }\n\n    return ( \n        <CustomInput \n            label= { props.inputLabel }  \n            variant= \"outlined\" \n            autoFocus={props.autofocus}\n            error= { !props.valid && props.touched }   \n            required= { props.validation.required }\n            style= {{ minWidth: 250 }} \n            onChange= { props.changed }\n            value={props.value}\n            type={props.elementConfig.type}\n            autoFocus={props.elementConfig.autofocus}\n            fullWidth\n        /> \n    );\n}\nexport default input;\n\ninput.propTypes  = {\n    value: PropTypes.any.isRequired,\n    elementConfig: PropTypes.any.isRequired,\n    valid: PropTypes.bool.isRequired,\n    elementType: PropTypes.any.isRequired, \n    changed: PropTypes.func.isRequired,\n    shouldValidate: PropTypes.bool.isRequired,\n    touched: PropTypes.bool.isRequired\n}","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography' ; \nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport Input from '../UI/Input';\n\n\nconst service = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed, isEditMode = false }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.applyFor} \n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'applyFor', 'serviceForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.typeOfApplication}\n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'typeOfApplication', 'serviceForm')} \n                        />    \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.typeOfpassportBooklet}\n                        readonly={isEditMode}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'typeOfpassportBooklet', 'serviceForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        controls.typeOfApplication.value === 'tatkaal' ? \n                        (\n                            <Typography align=\"center\" color=\"error\" gutterBottom>Note : In case of TatKaal application, Additional fees of Rs.2000 will required to pay at Passport Office in Cash.</Typography>\n                        ) : ''\n                    }\n                </Grid>\n    {\n        controls.applyFor.value === 'reissue' ? \n        (\n            <Fragment>\n                <Grid item  xs={12}>\n                    <Input \n                        { ...controls.specifyReason_0 }   \n                        changed={(event) => changed(event, 'specifyReason_0', 'serviceForm')} \n                        shouldValidate={true} /> \n                </Grid>\n               \n                {\n                    (controls.specifyReason_0.value === 'due_to_expire' \n                    || controls.specifyReason_0.value === 'already_expired') ? (\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input    \n                                {...controls.dateOfExpiry}\n                                changed={(event) => changed(event, 'dateOfExpiry', 'serviceForm')}  \n                                shouldValidate={false} /> \n                        </Grid>\n                    ) : ''\n                }\n                {\n                    (controls.specifyReason_0.value === 'lost_passport' \n                    || controls.specifyReason_0.value === 'demaged_passport') ? (\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.hasPassportExpired}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'hasPassportExpired', 'serviceForm')} \n                                />  \n                        </Grid>\n                    ) : ''\n                }\n                 <Grid item xs={12}>\n                    <Input  {...controls.isChangeInExistingPassportParticulars} \n                        changed={(event) => changed(event, 'isChangeInExistingPassportParticulars', 'serviceForm')}  \n                        shouldValidate={false} /> \n                </Grid>\n                {\n                     controls.isChangeInExistingPassportParticulars.value ?\n                     (\n                        <Grid item xs={12}>\n                            <FormControl required component=\"fieldset\">\n                                <FormLabel component=\"legend\">Changes to make in Passport Particulars </FormLabel>\n                                    <FormGroup row>\n                                        <Input    \n                                            {...controls.cpp_appearance}\n                                            changed={(event) => changed(event, 'cpp_appearance', 'serviceForm')} /> \n                                        <Input    \n                                            {...controls.cpp_signature}\n                                            changed={(event) => changed(event, 'cpp_signature', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_givenName}\n                                            changed={(event) => changed(event, 'cpp_givenName', 'serviceForm')} /> \n                                         \n                                         <Input    \n                                            {...controls.cpp_surname}\n                                            changed={(event) => changed(event, 'cpp_surname', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_dateOfBirth}\n                                            changed={(event) => changed(event, 'cpp_dateOfBirth', 'serviceForm')} /> \n                                         <Input    \n                                            {...controls.cpp_spouseName}\n                                            changed={(event) => changed(event, 'cpp_spouseName', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_address}\n                                            changed={(event) => changed(event, 'cpp_address', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_deleteECR}\n                                            changed={(event) => changed(event, 'cpp_deleteECR', 'serviceForm')} />  \n                                         <Input    \n                                            {...controls.cpp_others}\n                                            changed={(event) => changed(event, 'cpp_others', 'serviceForm')} />  \n                                    </FormGroup> \n                            </FormControl> \n                        </Grid>\n                     ) :\n                     ''\n                } \n            </Fragment>\n        ): ''\n    }\n               \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default service;\n","import React, {Fragment, useEffect } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst applicantDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n   \n    \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.first_name} \n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'first_name', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.middle_name} \n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'middle_name', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.surname} \n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'surname', 'applicantForm')}/>  \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                <Input  \n                    {...controls.aadhaar_no} \n                    shouldValidate={true} \n                    changed={(event) => changed(event, 'aadhaar_no', 'applicantForm')}/> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.gender}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'gender', 'applicantForm')} \n                        /> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.marital_status}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'marital_status', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}> \n                    <Input  \n                        {...controls.dateOfBirth}\n                        changed={(event) => changed(event, 'dateOfBirth', 'applicantForm')}  \n                        shouldValidate={false} /> \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isBirthOutOfIndia}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isBirthOutOfIndia', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.name_VillageTownCity}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'name_VillageTownCity', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.country}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'country', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    \n                {controls.isBirthOutOfIndia.value === 'no' ? (\n                    <Input  \n                        {...controls.state}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'state', 'applicantForm')} \n                        /> \n                ) : ''}\n                     \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {controls.isBirthOutOfIndia.value === 'no' ? (\n                        <Input  \n                            {...controls.district}\n                            shouldValidate={true} \n                            changed={(event) => changed(event, 'district', 'applicantForm')} \n                        /> \n                    ) : ''} \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.citizenShipOfIndiaBy}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'citizenShipOfIndiaBy', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.pan}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'pan', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.voterId}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'voterId', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.eduQualification}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'eduQualification', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.employType}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'employType', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.employType.value === 'government' ? (\n                            <Input  \n                                {...controls.orgName}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'orgName', 'applicantForm')} \n                                /> \n                        ) : ''\n                    }\n                    \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isParentSpouseGovServent}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isParentSpouseGovServent', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.isEligibleNonECR}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'isEligibleNonECR', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.visibleDistiguishMark}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'visibleDistiguishMark', 'applicantForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isKnownByOtherName}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isKnownByOtherName', 'applicantForm')} \n                        />  \n                </Grid>\n                {\n                    controls.isKnownByOtherName.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_firstName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_firstName', 'applicantForm')} \n                                    />  \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_middleName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_middleName', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_1_surname}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_1_surname', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_firstName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_firstName', 'applicantForm')} \n                                    />  \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_middleName}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_middleName', 'applicantForm')} \n                                    />\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.alise_name_2_surname}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'alise_name_2_surname', 'applicantForm')} \n                                    />\n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isNameChanged}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isNameChanged', 'applicantForm')} \n                        />  \n                </Grid>\n                { controls.isNameChanged.value ? (\n                    <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_firstName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_firstName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_middleName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_middleName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_1_surname}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_1_surname', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_firstName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_firstName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_middleName}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_middleName', 'applicantForm')} \n                                />\n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                            <Input  \n                                {...controls.prev_name_2_surname}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'prev_name_2_surname', 'applicantForm')} \n                                />\n                        </Grid>\n                    </Fragment>\n                ) : ''} \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default applicantDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography' ; \nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\n\nimport Input from '../UI/Input';\n\n\nconst familyDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_first_name}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'father_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'father_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.father_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'father_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_first_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mother_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'mother_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_first_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_first_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_middle_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_middle_name', 'familyForm')} \n                        />   \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.legalGuardian_surname_name}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'legalGuardian_surname_name', 'familyForm')} \n                        />   \n                </Grid>\n            </Grid>   \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default familyDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst presentResi = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPresentOutOfIndia}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPresentOutOfIndia', 'presentResiForm')} \n                        />   \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.house_street}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'house_street', 'presentResiForm')} \n                        />   \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    <Input  \n                        {...controls.village_town_city}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'village_town_city', 'presentResiForm')} \n                        />   \n                </Grid>     \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.country}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'country', 'presentResiForm')} \n                                />  \n                        ) : ''\n                    } \n                </Grid>  \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.state_province_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'state_province_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.state_province_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'state_province_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.district_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'district_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.district_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'district_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid> \n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.zip_pin_y}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'zip_pin_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.zip_pin_n}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'zip_pin_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                    {\n                        controls.isPresentOutOfIndia.value ? (\n                            <Input  \n                                {...controls.police_station_y}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'police_station_y', 'presentResiForm')} \n                                />  \n                        ) : (\n                            <Input  \n                                {...controls.police_station_n}\n                                shouldValidate={true} \n                                changed={(event) => changed(event, 'police_station_n', 'presentResiForm')} \n                                /> \n                        )\n                    } \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.mobile_no}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'mobile_no', 'presentResiForm')} \n                        />  \n                </Grid>\n                <Grid item md={4} sm={12} xs={12}>\n                     <Input  \n                        {...controls.email_id}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'email_id', 'presentResiForm')} \n                        />  \n                </Grid>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPermanentAddress}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPermanentAddress', 'presentResiForm')} \n                        />   \n                </Grid> \n                {\n                    controls.isPermanentAddress.value ? (\n                        <Fragment>\n                            <Grid item xs={12}>\n                                <Input  \n                                    {...controls.isPermanentSameAsPresent}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'isPermanentSameAsPresent', 'presentResiForm')} \n                                    />   \n                            </Grid> \n                            {\n                                !controls.isPermanentSameAsPresent.value ? (\n                                    <Fragment>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.house_street_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'house_street_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.village_town_city_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'village_town_city_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.country_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'country_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                        <Grid  item md={4} sm={12} xs={12}>\n                                            <Input  \n                                                {...controls.zip_pin_temp}\n                                                shouldValidate={false} \n                                                changed={(event) => changed(event, 'zip_pin_temp', 'presentResiForm')} \n                                                />   \n                                        </Grid>\n                                    </Fragment> \n                                ) : ''\n                            }\n                        </Fragment>\n                    ) : ''\n                }\n                \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default presentResi;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \n\nimport Input from '../UI/Input';\n\n\nconst emerContDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.name_address}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'name_address', 'emerContDetailsForm')} \n                        />   \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                        {...controls.mobile_no}\n                        shouldValidate={true} \n                        changed={(event) => changed(event, 'mobile_no', 'emerContDetailsForm')} \n                        /> \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                        {...controls.email_id}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'email_id', 'emerContDetailsForm')} \n                        /> \n                </Grid>\n            </Grid>   \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default emerContDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \nimport Typography from '@material-ui/core/Typography';\nimport Input from '../UI/Input';\n\n\nconst prevPassport = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed, isReissue }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>  \n            {\n                !isReissue ? (\n                     <Fragment>\n                         <Grid item xs={12}>\n                                <Input  \n                                        {...controls.isHoldIdentityCert}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'isHoldIdentityCert', 'prevPassportForm')} \n                                        />    \n                                </Grid> \n                                <Grid item xs={12}>\n                                {\n                                        controls.isHoldIdentityCert.value  ? \n                                        (\n                                        <Typography align=\"left\" color=\"error\" gutterBottom>Note: If you already have a Passport,then please apply in Reissue Passport category; Do not apply in New Passport.</Typography>\n                                        ) : ''\n                                }\n                                </Grid>\n                     </Fragment>\n                ) : ''\n            }\n            {\n                    isReissue || controls.isHoldIdentityCert.value ? (\n                      <Fragment>\n                              <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.passport_no}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'passport_no', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.dateOfIssue}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'dateOfIssue', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.dateOfExpiry}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'dateOfExpiry', 'prevPassportForm')} \n                                        />  \n                                </Grid>   \n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.placeOfIssue}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'placeOfIssue', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                                <Grid item md={4} sm={12} xs={12}>\n                                        <Input  \n                                        {...controls.fileNumber}\n                                        shouldValidate={false} \n                                        changed={(event) => changed(event, 'fileNumber', 'prevPassportForm')} \n                                        />  \n                                </Grid>\n                      </Fragment>      \n                    ) : ''\n            }\n                \n                <Grid item xs={12}>\n                        <Input  \n                        {...controls.details_prevCurOffPassport}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'details_prevCurOffPassport', 'prevPassportForm')} \n                        />  \n                </Grid>\n        {\n              controls.details_prevCurOffPassport.value === 'available' ? (\n                <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.passport_no_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'passport_no_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid> \n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.dateOfIssue_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'dateOfIssue_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>   \n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.dateOfExpiry_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'dateOfExpiry_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.placeOfIssue_dipOff}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'placeOfIssue_dipOff', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                </Fragment> \n              ) : ''  \n        } \n                <Grid item  xs={12}>\n                        <Input  \n                        {...controls.isAppliedNotIssued}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isAppliedNotIssued', 'prevPassportForm')} \n                        />  \n                </Grid>\n        {\n                controls.isAppliedNotIssued.value ? (\n                <Fragment>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.fileNo_notIssued}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'fileNo_notIssued', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.monthYearApply}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'monthYearApply', 'prevPassportForm')} \n                                />  \n                        </Grid>\n                        <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                {...controls.namePassportOffice}\n                                shouldValidate={false} \n                                changed={(event) => changed(event, 'namePassportOffice', 'prevPassportForm')} \n                                />  \n                        </Grid> \n                </Fragment>   \n                ) : ''\n        } \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default prevPassport;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'; \nimport Typography from '@material-ui/core/Typography';\n\nimport Input from '../UI/Input';\n\n\nconst otherDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed,  }) => { \n    return ( \n        <Fragment>\n            <Grid container  spacing={2}>\n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isArrestWarran}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isArrestWarran', 'otherDetailsForm')} \n                        />   \n                </Grid> \n                {\n                    controls.isArrestWarran.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.nameCourtePlace}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'nameCourtePlace', 'otherDetailsForm')} \n                                    />   \n                            </Grid> \n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.caseFirWarrantNumber}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'caseFirWarrantNumber', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.lawSections}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'lawSections', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isCriminalOffence}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isCriminalOffence', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isCriminalOffence.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.nameCourtePlace_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'nameCourtePlace_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid> \n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.caseFirWarrantNumber_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'caseFirWarrantNumber_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.lawSections_0}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'lawSections_0', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isRefusedDenied}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isRefusedDenied', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isRefusedDenied.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.refusalReason}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'refusalReason', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isImpoundRevoked}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isImpoundRevoked', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isImpoundRevoked.value ? (\n                        <Fragment>\n                            <Grid item xs={12}>\n                                <Typography align=\"left\" variant=\"h6\" gutterBottom>Impounded/ Revoked Passport Details</Typography>\n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.impoundRevokedPassportNo}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'impoundRevokedPassportNo', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.reasonImpoundRevocation}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'reasonImpoundRevocation', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isPoliticalAsylum}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isPoliticalAsylum', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isPoliticalAsylum.value ? (\n                        <Fragment>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.country}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'country', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                }\n                \n                <Grid item xs={12}>\n                    <Input  \n                        {...controls.isEmerCert}\n                        shouldValidate={false} \n                        changed={(event) => changed(event, 'isEmerCert', 'otherDetailsForm')} \n                        />   \n                </Grid>\n                {\n                    controls.isEmerCert.value ? (\n                        <Fragment>\n                             <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtNo}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtNo', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtDate}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtDate', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.emerCirtCountry}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'emerCirtCountry', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.issueAuthority}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'issueAuthority', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                            <Grid item md={4} sm={12} xs={12}>\n                                <Input  \n                                    {...controls.reasonIssuing}\n                                    shouldValidate={false} \n                                    changed={(event) => changed(event, 'reasonIssuing', 'otherDetailsForm')} \n                                    />   \n                            </Grid>\n                        </Fragment>\n                    ) : ''\n                } \n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={() => handleBack()}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => handleNext()}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default otherDetails;\n","import React, {Fragment } from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';  \nimport Input from '../UI/Input';\n\n\nconst docmentDetails = ({ controls, formIsValid, activeStep, steps, handleBack, handleNext, changed }) => { \n    return ( \n        <Fragment>\n            <Grid container spacing={2}>  \n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                    {...controls.proofOfBirth}\n                    shouldValidate={false} \n                    changed={(event) => changed(event, 'proofOfBirth', 'documentDetailsForm')} \n                    />  \n                </Grid>\n                <Grid item md={6} sm={12} xs={12}>\n                    <Input  \n                    {...controls.proofOfPresentResi}\n                    shouldValidate={false} \n                    changed={(event) => changed(event, 'proofOfPresentResi', 'documentDetailsForm')} \n                    />  \n                </Grid>\n            </Grid> \n            <div style={{margin: '20px'}}>\n                <Button\n                    disabled={activeStep === 0}\n                    onClick={handleBack}\n                >\n                    Back\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                >\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                </Button>\n            </div> \n        </Fragment>\n    );\n}\n\nexport default docmentDetails;\n","import React from 'react';\nimport Dialog  from '@material-ui/core/Dialog'; \nimport Icon from '@material-ui/core/Icon';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport SyncIcon from '@material-ui/icons/Sync';\n\nconst alertModel = ({isOpen, alertTextMain, alertTextSecondary, alertIdentifier, handleClose}) => { \n \n    let buttonText = '';\n    let alertIcon = null;\n    if(alertIdentifier === 'isCreatingOrderFailed'){\n        buttonText = \"Edit Application\";\n        alertIcon = <InfoIcon color=\"error\" style={{ fontSize: \"5.25rem\" }}/>;\n    }\n\n    if(alertIdentifier === 'isPaymentVerified'){\n        buttonText = \"OK\";\n        alertIcon = <CheckCircleIcon color=\"primary\" style={{ fontSize: \"5.25rem\" }}/>;\n    }\n\n    if(alertIdentifier === 'isPaymentFailed'){\n        buttonText = \"Try again\";\n        alertIcon = <SyncIcon color=\"action\" style={{ fontSize: \"5.25rem\" }}/>;\n    }\n\n    if(alertIdentifier === 'success'){\n        buttonText = \"OK\";\n        alertIcon = <CheckCircleIcon color=\"primary\" style={{ fontSize: \"5.25rem\" }}/>;\n    }\n\n    if(alertIdentifier === 'failed'){\n        buttonText = \"Try again\";\n        alertIcon = <InfoIcon color=\"error\" style={{ fontSize: \"5.25rem\" }}/>;\n    }\n\n    return (\n        <Dialog  open={isOpen} onClose={handleClose}>\n            <Box style={{\n                    display:'flex', \n                    flexDirection: 'column',\n                    justifyContent:'center', \n                    alignItems:'center', \n                    width:'auto', \n                    height:'auto',\n                    padding: '50px'\n                    }}> \n                {alertIcon}\n                <Typography variant=\"h6\" align=\"center\" style={{ marginTop: '20px'}}>{alertTextMain}</Typography>\n                <Typography align=\"center\">{alertTextSecondary}</Typography>\n                <Button variant=\"contained\" onClick={ handleClose } color=\"primary\" style={{ margin:\"20px 0\" }}>{ buttonText }</Button>\n            </Box> \n        </Dialog >\n    );\n}\n\nexport default alertModel;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\n}), 'Info');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckCircle');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z\"\n}), 'Sync');\n\nexports.default = _default;"],"sourceRoot":""}